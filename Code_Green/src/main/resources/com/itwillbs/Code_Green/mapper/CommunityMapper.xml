<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.Code_Green.mapper.CommunityMapper">

	<!-- 게시물 목록 조회(검색 기능 추가) -->
	<select id="selectCommunityList" parameterType="hashMap" resultType="com.itwillbs.Code_Green.vo.BoardVO">
		SELECT * 
			FROM board b
			LEFT JOIN
				(SELECT 
						rf_board_idx, 
						count(*) AS best_cnt 
						FROM 
							board_best 
						GROUP BY 
							RF_BOARD_IDX) AS be
			
			ON b.board_idx = be.rf_board_idx
			LEFT JOIN
				(SELECT 
						reply_bo_ref, 
						count(*) AS reply_cnt 
						FROM 
							reply
						GROUP BY 
							reply_bo_ref) AS re
						
			ON b.board_idx = re.reply_bo_ref
			WHERE b.board_type = '커뮤'
			
			<!-- choose, when, otherwise 태그를 사용하여 복수개의 조건 판별(if ~ else if 문 구조) -->
			<!-- 1. 검색어(keyword)가 널스트링이 아닐 때 검색 수행 -->
			<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('category')">
						AND board_category LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('id')">
						AND board_id LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('subject')">
						AND board_subject LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('content')">
						AND board_content LIKE '%${keyword}%' 
					</when>
					<when test="searchType.equals('subject_content')">
						AND board_subject LIKE '%${keyword}%' OR board_content LIKE '%${keyword}%'
					</when>
				</choose>
			</if>
			ORDER BY
				FIELD(board_id, 'admin') DESC , board_date DESC , board_idx DESC
			LIMIT #{startRow}, #{listLimit}
	</select>




	<!-- 전체 게시물 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectCommunityListCount" resultType="integer">
		SELECT count(*) 
			FROM board b
			LEFT JOIN
				(SELECT 
						rf_board_idx, 
						count(*) AS best_cnt 
						FROM 
							board_best 
						GROUP BY 
							RF_BOARD_IDX) AS be
			
			ON b.board_idx = be.rf_board_idx
			LEFT JOIN
				(SELECT 
						reply_bo_ref, 
						count(*) AS reply_cnt 
						FROM 
							reply
						GROUP BY 
							reply_bo_ref) AS re
						
			ON b.board_idx = re.reply_bo_ref
			WHERE b.board_type = '커뮤'
			<!-- choose, when, otherwise 태그를 사용하여 복수개의 조건 판별(if ~ else if 문 구조) -->
			<!-- 1. 검색어(keyword)가 널스트링이 아닐 때 검색 수행 -->
			<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('category')">
						AND board_category LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('id')">
						AND board_id LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('subject')">
						AND board_subject LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('content')">
						AND board_content LIKE '%${keyword}%' 
					</when>
					<when test="searchType.equals('subject_content')">
						AND board_subject LIKE '%${keyword}%' OR board_content LIKE '%${keyword}%'
					</when>
				</choose>
			</if>
	</select>
		
		
	<!-- 게시물 조회수 증가 -->
	<update id="updateReadcount">
		UPDATE board
			SET 
				board_readcount = board_readcount + 1
			WHERE
				board_idx = #{board_idx}
	</update>
		
	<!-- 글 새로등록 ( 사진제외, 텍스트만 ) -->	
	<insert id="insertCommunityBoard">
		INSERT 
			INTO board 
			VALUES (
				IFNULL((SELECT MAX(board_idx) FROM board b),0) + 1,
				'0',
				'커뮤',
				#{board_id},
				#{board_category},
				#{board_subject},
				#{board_content},
				'0',
				date_format(now(),'%Y%m%d')
			)
	</insert>	
	
	
	<!-- 글 - 파일업로드!!!등록 ( 사진만 ) -->
	<insert id="insertCommunityFile">
		<selectKey keyProperty="file_board_idx" resultType="integer" order="BEFORE">
			SELECT MAX(file_board_idx) FROM file_board
		</selectKey>
		INSERT
			INTO file_board
			VALUES (
				#{file_board_idx} + 1,
				#{file1},
				#{file2},
				#{file3},
				(SELECT MAX(board_idx) FROM board)
			)
	</insert>
	
	
	<!-- 글 상세정보 조회 -->
	<select id="selectBoardDetail" resultType="com.itwillbs.Code_Green.vo.BoardVO">
		SELECT b.board_idx,
			   b.board_item_idx,
			   b.board_type,
		       b.board_id,
		       b.board_category,
		       b.board_subject,
		       b.board_content,
		       b.BOARD_READCOUNT,
		       b.BOARD_DATE,
		       be.best_cnt,
		       re.reply_cnt,
		       f.FILE1,
		       f.FILE2,
		       f.FILE3
		FROM board b
		LEFT JOIN (SELECT 
					rf_board_idx, 
					count(*) AS best_cnt 
					FROM board_best 
					GROUP BY RF_BOARD_IDX) AS be
					
		ON b.board_idx = be.rf_board_idx
		LEFT JOIN (SELECT reply_bo_ref, 
					count(*) AS reply_cnt 
					FROM 
					reply
					GROUP BY reply_bo_ref) AS re
		ON b.board_idx = re.reply_bo_ref
		LEFT JOIN file_board AS f
		ON b.board_idx = f.rf_board_idx
		WHERE board_type = '커뮤' AND board_idx = #{board_idx};
	</select>	
		
	<!-- 글 수정을 위한 원래게시글 내용 불러오기 -->	
	<select id="selectBoardModify" resultType="com.itwillbs.Code_Green.vo.BoardVO">
		SELECT b.board_idx,
			   b.board_item_idx,
			   b.board_type,
		       b.board_id,
		       b.board_category,
		       b.board_subject,
		       b.board_content,
		       b.BOARD_READCOUNT,
		       b.BOARD_DATE,
		       be.best_cnt,
		       re.reply_cnt,
		       f.FILE1,
		       f.FILE2,
		       f.FILE3
		FROM board b
		LEFT JOIN (SELECT 
					rf_board_idx, 
					count(*) AS best_cnt 
					FROM board_best 
					GROUP BY RF_BOARD_IDX) AS be
					
		ON b.board_idx = be.rf_board_idx
		LEFT JOIN (SELECT reply_bo_ref, 
					count(*) AS reply_cnt 
					FROM 
					reply
					GROUP BY reply_bo_ref) AS re
		ON b.board_idx = re.reply_bo_ref
		LEFT JOIN file_board AS f
		ON b.board_idx = f.rf_board_idx
		WHERE board_type = '커뮤' AND board_idx = #{board_idx};
	</select>
	
	<!-- 글 수정 => 파일 업데이트  -->	
	<update id="updateFile">
		UPDATE file_board
			SET
				rf_board_idx = #{board_idx},
				file1 = IFNULL(#{file1},''),
				file2 = IFNULL(#{file2},''), 
				file3 = IFNULL(#{file3},'')
			WHERE
				rf_board_idx = #{board_idx}
	</update>	
	
	<!-- 글 수정 => 글 업데이트 -->
	<update id="updateBoard">
		UPDATE board
			SET
				board_category = #{board_category},
				board_subject = #{board_subject},
				board_content = #{board_content}
			WHERE
				board_type = '커뮤'
				AND
				board_idx = #{board_idx}	
	</update>		
	
	
	<!-- 게시글 삭제전 파일1 명 조회 -->	
	<select id="selectRealFile1" resultType="string">
		SELECT file1
			FROM file_board
			WHERE
				rf_board_idx = #{board_idx}
	</select>

	<!-- 게시글 삭제전 파일2 명 조회 -->	
	<select id="selectRealFile2" resultType="string">
		SELECT file2
			FROM file_board
			WHERE
				rf_board_idx = #{board_idx}
	</select>

	<!-- 게시글 삭제전 파일3 명 조회 -->	
	<select id="selectRealFile3" resultType="string">
		SELECT file3
			FROM file_board
			WHERE
				rf_board_idx = #{board_idx}
	</select>
	
	
		
	<!-- 게시글 삭제  -->
	<delete id="deleteBoard">
		DELETE 
			FROM board
			WHERE 
				board_type = '커뮤' 
				AND 
				board_idx = #{board_idx}
	</delete>
		
		
	<!-- 게시글 삭제 시 해당 파일(정보) 삭제 -->	
	<delete id="deleteBoardFile">
		DELETE 
			FROM file_board
			WHERE 
				rf_board_idx = #{board_idx}
	</delete>	
		
		
	<!-- 신고글 입력 -->	
	<insert id="insertReport">
		INSERT 
			INTO report
			VALUES (
					IFNULL((SELECT MAX(report_idx) FROM report r),0) + 1,   
					#{board_idx}, 
					#{report_subject}, 
					#{report_content}, 
					#{reporter}, 
					'처리대기', 				
					now())
					
	</insert>
	

	<!-- 추천하기 클릭시 아이디 존재여부 판단하기  -->
	<select id="selectBoardBest" resultType="integer">
		SELECT count(*)
			FROM board_best
			WHERE 
				rf_board_idx = #{rf_board_idx} 
				AND
				rf_member_idx = (SELECT member_idx FROM member WHERE member_id=#{member_id})
	</select>
	
	
	<!-- 추천하기 테이블에서 이미 추천했던 아이디 행 삭제하기 -->
	<delete id="deleteBoardBest">
		DELETE 
			FROM board_best
			WHERE
				rf_board_idx = #{rf_board_idx}
				AND 
				rf_member_idx = (SELECT member_idx FROM member WHERE member_id=#{member_id})
	</delete>
	
	<!-- 추천하기 테이블에 추천아이디 행 추가하기 -->
	<insert id="insertBoardBest">
		INSERT
			INTO board_best
			VALUES (
					IFNULL((SELECT MAX(board_best_idx) FROM board_best b),0) + 1,
					(SELECT member_idx FROM member WHERE member_id=#{member_id}),
					#{rf_board_idx}
			)
	</insert>
	
	<!-- 추천수 카운팅 -->
	<select id="countBoardBest" resultType="integer">
		SELECT
			count(*)
			FROM board_best
			WHERE
				rf_board_idx = #{rf_board_idx}
	</select>
	
	
	<!-- 댓글수 카운팅 -->
	<select id="countReply" resultType="integer">
		SELECT
			count(*)
			FROM reply
			WHERE
				reply_bo_ref = #{reply_bo_ref}
	</select>
	
	
	<!-- 댓글쓰기(기본) -->
	<insert id="insertReply">
		INSERT
			INTO reply
			VALUES (
					IFNULL((SELECT MAX(reply_idx) FROM reply r),0) + 1,
					'커뮤',
					#{reply_id},
					#{reply_content},
					IFNULL((SELECT MAX(reply_idx) FROM reply r),0) + 1,
					0,
					0,
					#{reply_bo_ref},
					date_format(now(),'%Y년%m월%d일 %H:%i')
			)
	
	</insert>
	
	<!-- 댓글 목록 출력 -->
	<select id="selectReplyList" resultType="com.itwillbs.Code_Green.vo.ReplyVO" parameterType="com.itwillbs.Code_Green.vo.ReplyVO">
		SELECT * 
			FROM reply
			WHERE reply_type = '커뮤'
				  AND 
				  reply_bo_ref = #{reply_bo_ref}
			ORDER BY 
				  reply_re_ref DESC,
				  reply_re_seq ASC
	</select>	
	
	<!-- 
	대댓글 등록을 위한 게시물 순서번호(reply_re_seq) 조정 - UPDATE
	=> 기존 답글들에 대한 순서번호 증가(UPDATE 구문 사용)
	=> 원본글의 참조글번호(reply_re_ref)와 같은 레코드들 중에서
	   원본글의 순서번호(re_seq) 보다 큰 게시물들의 순서번호를 + 1 씩 처리
	-->
	
	<!-- 대댓글 순서번호 조정(reply_re_seq) -->
	<update id="updateReplyReSeq">
		UPDATE reply 
				SET 
					reply_re_seq = reply_re_seq + 1 
				WHERE 
					reply_re_ref = #{reply_re_ref}
					AND reply_re_seq > #{reply_re_seq}
		
	</update>
	<!-- 
	대댓글 등록 - INSERT
	=> 단, INSERT 작업 실행 전 먼저 SELECT 구문을 통해 글번호(board_num) 의 최대값을 조회하여
	   INSERT 시 reply_idx 값을 조회결과 + 1 값으로 설정
	=> 또한, INSERT 과정에서 들여쓰기레벨(board_re_lev)과 순서번호(board_re_seq)는
	   전달받은 값 + 1 값을 사용
	 -->
	<!-- 대댓글 쓰기 -->
	<insert id="insertReReply">
		INSERT
			INTO reply
			VALUES (
					IFNULL((SELECT MAX(reply_idx) FROM reply r),0) + 1,
					'커뮤',
					#{reply_id},
					#{reply_content},
					#{reply_re_ref},
					#{reply_re_lev} + 1,
					#{reply_re_seq} + 1,
					#{reply_bo_ref},
					date_format(now(),'%Y년%m월%d일 %H:%i')
			)
	
	</insert>
	
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply">
		DELETE 
			FROM reply
			WHERE reply_idx = #{reply_idx} 
			
	</delete>
	
</mapper>
