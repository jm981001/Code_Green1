<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.Code_Green.mapper.ManagerMapper">
	
	<!-- 가입 -->
	<insert id="insertManager">
		<selectKey keyProperty="manager_idx" resultType="integer" order="BEFORE">
				SELECT MAX(manager_idx) FROM manager
			</selectKey>
			INSERT INTO manager
			VALUES (
					#{manager_idx} + 1,
					#{manager_id},		 		<!-- 	MANAGER_ID VARCHAR(16)UNIQUE NOT NULL, 			-->
					#{manager_pass},	 		<!-- 	MANAGER_PASS VARCHAR(20)UNIQUE NOT NULL, 		-->
					#{manager_name},	 		<!-- 	MANAGER_NAME VARCHAR(10) NOT NULL, 				-->
					#{manager_brandname},		<!-- 	MANAGER_BRANDNAME VARCHAR(20) NOT NULL,	 		-->
					#{manager_storecode},		<!-- 	MANAGER_STORECODE VARCHAR(20) NOT NULL, 		-->
					#{manager_phone},	 		<!-- 	MANAGER_PHONE VARCHAR(12) NOT NULL UNIQUE, 		-->
					#{manager_email},	 		<!-- 	MANAGER_EMAIL VARCHAR(30) NOT NULL UNIQUE, 		-->
					'N',						<!-- 	MANAGER_EMAIL_AUTH VARCHAR(1) DEFAULT 'N', 		-->
					#{manager_postcode}, 		<!-- 	MANAGER_POSTCODE VARCHAR(6) NOT NULL, 			-->
					#{manager_address},	 		<!-- 	MANAGER_ADDRESS VARCHAR(100) NOT NULL, 			-->
					'N',						<!-- 	MANAGER_ADMINAUTH VARCHAR(1) DEFAULT 'N', 		-->
					#{manager_realfile}, 		<!-- 	MANAGER_REALFILE VARCHAR(30) NOT NULL, 			-->
					#{manager_original_file},	<!--	MANAGER_ORIGINAL_FILE VARCHAR(30) NOT NULL, 	-->
					'N',						<!-- 	MANAGER_DEL_YN VARCHAR(1) DEFAULT 'N',		 	-->
					date_format(now(),'%Y%m%d%T')<!--	MANAGER_DATE VARCHAR(14) NOT NULL 				-->
					)
	</insert>


<!-- 	<select id="loginManager" resultType="com.itwillbs.Code_Green.vo.ManagerVO"> -->
<!-- 		SELECT * FROM manager -->
<!-- 		WHERE MANAGER_ID=#{manager_id} AND -->
<!-- 		MANAGER_PASS=#{manager_pass} -->
<!-- 	</select> -->

<!-- 
	BCryptPasswordEncoder 객체를 활용하여 로그인을 수행할 때
	암호문으로 저장되어 있는 패스워드 조회하기 위한 SELECT 구문 작성
	=> 이 때, MemberVO 타입을 resultType 으로 선언해도 되지만
	   패스워드 컬럼 1개의 문자 데이터이므로 string(String) 타입으로 선언해도 된다!
	-->
	<!-- 로그인 -->
	<select id="selectPasswd" resultType="string">
		SELECT manager_pass 
		FROM manager
		WHERE manager_id = #{manager_id}
	</select>

	
<!-- 	3. 브랜드 정보 조회 수행을 위한 select 태그 작성 -->
<!-- 	=> ManagerMapper 객체의 selectManagerInfo() 메서드명을 id 속성값으로 지정 -->
<!-- 	=> 파라미터는 메서드 전달된 파라미터 변수명과 동일한 이름 사용 -->
<!-- 	=> 결과 타입은 1개 레코드 정보를 저장할 ManagerVO 타입 지정 -->
	
	<select id="selectManagerInfo" resultType="com.itwillbs.Code_Green.vo.ManagerVO">
		SELECT * FROM manager
		WHERE MANAGER_ID=#{manager_id}
	</select>



<!-- 상품 목록 조회 (검색기능추가)-->

	<select id="selectItemList" resultType="com.itwillbs.Code_Green.vo.ItemVO">
		select i.item_idx, 
			   i.re_manager_idx,
			   i.item_name,
			   i.item_info,
			   i.item_packing, 
			   i.item_category, 
			   i.item_price,
			   i.item_sale, 
			   i.item_stock, 
			   i.item_status,  
			   i.item_readcount,  
			   i.item_date,
			   m.manager_brandname 
			  
		 FROM item i  JOIN manager m  ON i.re_manager_idx= m. manager_idx 
		 WHERE m.manager_id= #{ id}
		
	
	<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('item_name')">
					AND i.item_name LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('brand_name')">
					AND m.manager_brandname LIKE '%${keyword}%' 
					</when>
				</choose>
	</if>
	     ORDER BY i.item_idx DESC
	        LIMIT #{startRow}, #{listLimit}
		 
	
	</select>
	<!-- 상품 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectItemListCount" resultType="integer">
	
		SELECT 
		COUNT(*)
			FROM item
	
		<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('item_name')">
					AND i.item_name LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('brand_name')">
					AND m.manager_brandname LIKE '%${keyword}%' 
					</when>
				</choose>
		</if>
<!-- 	      ORDER BY i.item_idx DESC -->
<!-- 	        LIMIT #{startRow}, #{listLimit} -->
    </select>
    
    
	<!--상품문의글 목록 조회(검색기능추가) -->
<!-- 	<select id="selectQnaBoardList" resultType="com.itwillbs.Code_Green.vo.QnaVO"> -->
<!-- 		SELECT * FROM qna -->
<!-- 		WHERE -->
<!-- 			qna_type='상품문의' -->
			
<!-- 		<if test="!keyword.equals('')"> -->
<!-- 				2. 검색타입(search)에 따른 WHERE 변경 -->
<!-- 				<choose> -->
<!-- 					<when test="searchType.equals('item_name')"> -->
<!-- 					AND i.item_name LIKE '%${keyword}%' -->
<!-- 					</when> -->
<!-- 					<when test="searchType.equals('brand_name')"> -->
<!-- 					AND m.manager_brandname LIKE '%${keyword}%'  -->
<!-- 					</when> -->
<!-- 				</choose> -->
<!-- 	</if> -->
<!-- 	     ORDER BY i.item_idx DESC -->
<!-- 	        LIMIT #{startRow}, #{listLimit} -->
		 	
			
			
			
<!-- 	</select> -->

	<!--상품문의글 상세 조회 -->
<!-- 	<select id="selectQnaBoardListCount" resultType="com.itwillbs.Code_Green.vo.QnaVO"> -->
<!-- 		SELECT * FROM qna -->
<!-- 		WHERE   -->
<!-- 			 qna_idx=#{qna_idx}  -->
			 
<!-- 	</select> -->

	<!--상품문의글 목록 조회 -->
	<select id="selectQnaBoardList" resultType="com.itwillbs.Code_Green.vo.QnaVO">
		SELECT * FROM qna
		WHERE
			qna_type='상품문의'
	</select>

	<!--상품문의글 상세 조회 -->
	<select id="selectQnaInfo" resultType="com.itwillbs.Code_Green.vo.QnaVO">
		SELECT * FROM qna
		WHERE  
			 qna_idx=#{qna_idx} 
			 
	</select>




<!-- 상품문의글 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectBoardListCount" resultType="integer">
		SELECT 
			COUNT(*) 
			FROM qna
			<!-- choose, when, otherwise 태그를 사용하여 복수개의 조건 판별(if ~ else if 문 구조) -->
			<!-- 1. 검색어(keyword)가 널스트링이 아닐 때 검색 수행 -->
					<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('item_name')">
					AND i.item_name LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('brand_name')">
					AND m.manager_brandname LIKE '%${keyword}%' 
					</when>
				</choose>
		</if>
	</select>
		
		
	<!-- 게시물 조회수 증가 -->
	<update id="updateReadcount">
		UPDATE board
			SET 
				board_readcount = board_readcount + 1
			WHERE
				board_idx = #{board_idx}
	</update>
		
		
		
		
	<!-- 글 상세정보 조회 -->
	<select id="selectBoardDetail" resultType="com.itwillbs.Code_Green.vo.BoardVO">
		SELECT * 
			FROM board
			WHERE 
			board_idx = #{board_idx}
	</select>	
		
	<!-- 
	답글 등록을 위한 게시물 순서번호(board_re_seq) 조정 - UPDATE
	=> 기존 답글들에 대한 순서번호 증가(UPDATE 구문 사용)
	=> 원본글의 참조글번호(board_re_ref)와 같은 레코드들 중에서
	   원본글의 순서번호 보다 큰 게시물들의 순서번호를 + 1 씩 처리
	-->
	<update id="updateBoardReSeq" >
		UPDATE board 
			SET 
				board_re_seq = board_re_seq + 1 
			WHERE 
				board_re_ref = #{board_re_ref}
				AND board_re_seq > #{board_re_seq}
	</update>
	
	<!-- 
	답글 등록 - INSERT
	=> 단, INSERT 작업 실행 전 먼저 SELECT 구문을 통해 글번호(board_num) 의 최대값을 조회하여
	   INSERT 시 board_num 값을 조회결과 + 1 값으로 설정
	=> 또한, INSERT 과정에서 들여쓰기레벨(board_re_lev)과 순서번호(board_re_seq)는
	   전달받은 값 + 1 값을 사용
	-->
	<insert id="insertReplyBoard">
		<selectKey keyProperty="board_num" resultType="integer" order="BEFORE">
			SELECT MAX(board_num) FROM board
		</selectKey>
		INSERT 
			INTO board
			VALUES (
					#{board_num} + 1, 
					#{board_name}, 
					#{board_pass}, 
					#{board_subject}, 
					#{board_content}, 
					'', 
					'', 
					#{board_re_ref}, 
					#{board_re_lev} + 1, 
					#{board_re_seq} + 1, 
					0,
					now())
	</insert>	









	<!-- 팔로우 목록 조회 -->
<!-- 	<select id="selectFollowInfo" resultType="com.itwillbs.Code_Green.vo.FollowVO"> -->
<!-- 		SELECT COUNT(DISTINCT follow_idx) -->
<!-- 		FROM FOLLOW -->
<!-- 		WHERE MANAGER_BRANDNAME=#{manager_brandname} -->
<!-- 		JOIN manager ; -->
<!-- 		VALUES -->
<!-- 	</select> -->





</mapper>
