<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.Code_Green.mapper.ManagerMapper">
	
	<!-- 가입 -->
	<insert id="insertManager">
		<selectKey keyProperty="manager_idx" resultType="integer" order="BEFORE">
				SELECT MAX(manager_idx) FROM manager
			</selectKey>
			INSERT INTO manager
			VALUES (
					#{manager_idx} + 1,
					#{manager_id},		 		<!-- 	MANAGER_ID VARCHAR(16)UNIQUE NOT NULL, 			-->
					#{manager_pass},	 		<!-- 	MANAGER_PASS VARCHAR(20)UNIQUE NOT NULL, 		-->
					#{manager_name},	 		<!-- 	MANAGER_NAME VARCHAR(10) NOT NULL, 				-->
					#{manager_brandname},		<!-- 	MANAGER_BRANDNAME VARCHAR(20) NOT NULL,	 		-->
					#{manager_info},
					#{manager_storecode},		<!-- 	MANAGER_STORECODE VARCHAR(20) NOT NULL, 		-->
					#{manager_phone},	 		<!-- 	MANAGER_PHONE VARCHAR(12) NOT NULL UNIQUE, 		-->
					#{manager_email},	 		<!-- 	MANAGER_EMAIL VARCHAR(30) NOT NULL UNIQUE, 		-->
					'N',						<!-- 	MANAGER_EMAIL_AUTH VARCHAR(1) DEFAULT 'N', 		-->
					#{manager_postcode}, 		<!-- 	MANAGER_POSTCODE VARCHAR(6) NOT NULL, 			-->
					#{manager_address},	 		<!-- 	MANAGER_ADDRESS VARCHAR(100) NOT NULL, 			-->
					'N',						<!-- 	MANAGER_ADMINAUTH VARCHAR(1) DEFAULT 'N', 		-->
					#{manager_realfile}, 		<!-- 	MANAGER_REALFILE VARCHAR(30) NOT NULL, 			-->
					#{manager_original_file},	<!--	MANAGER_ORIGINAL_FILE VARCHAR(30) NOT NULL, 	-->
					'N',						<!-- 	MANAGER_DEL_YN VARCHAR(1) DEFAULT 'N',		 	-->
					date_format(now(),'%Y%m%d%T')<!--	MANAGER_DATE VARCHAR(14) NOT NULL 				-->
					)
	</insert>


<!-- 
	BCryptPasswordEncoder 객체를 활용하여 로그인을 수행할 때
	암호문으로 저장되어 있는 패스워드 조회하기 위한 SELECT 구문 작성
	=> 이 때, MemberVO 타입을 resultType 으로 선언해도 되지만
	   패스워드 컬럼 1개의 문자 데이터이므로 string(String) 타입으로 선언해도 된다!
	-->
	<!-- 로그인 -->
	<select id="selectPasswd" resultType="string">
		SELECT manager_pass 
		FROM manager
		WHERE manager_id = #{manager_id}
	</select>

	
<!-- 	3. 브랜드 정보 조회 수행을 위한 select 태그 작성 -->
<!-- 	=> ManagerMapper 객체의 selectManagerInfo() 메서드명을 id 속성값으로 지정 -->
<!-- 	=> 파라미터는 메서드 전달된 파라미터 변수명과 동일한 이름 사용 -->
<!-- 	=> 결과 타입은 1개 레코드 정보를 저장할 ManagerVO 타입 지정 -->
	
	<select id="selectManagerInfo" resultType="com.itwillbs.Code_Green.vo.ManagerVO">
		SELECT * FROM manager
		WHERE MANAGER_ID=#{manager_id}
	</select>

<!--  브랜드 정보조회(브랜드마이페이지) -->

	<select id="selectBrandInfo" resultType="com.itwillbs.Code_Green.vo.ManagerVO">
		SELECT * FROM manager
		WHERE MANAGER_ID=#{sId}
<!-- 		AND MANAGER_BRANDNAME=#{manager_brandname} -->
	</select>

	<!--브랜드 정보 수정 -->
	<update id="updateBrandInfo">
		UPDATE manager
		SET 
			manager_id = #{manager_id},
<!-- 			manager_pass = #{newPass}, -->
			<if test="newPasswd != null and newPasswd != ''">
			manager_pass = #{manager_pass},
			</if>
			manager_name = #{manager_name},
			manager_brandname = #{manager_brandname},
			manager_storecode = #{manager_storecode},
		    manager_phone = #{manager_phone},
 	        manager_email = #{manager_email}, 
			manager_postcode = #{manager_postcode}, 
			manager_address = #{manager_address} 
			
		WHERE 
			manager_id = #{manager_id}
	</update>








<!-- 상품 목록 조회 (검색기능추가)-->

	<select id="selectItemList" resultType="com.itwillbs.Code_Green.vo.ItemVO">
		select i.item_idx, 
			   i.re_manager_idx,
			   i.item_name,
			   i.item_info,
			   i.item_packing, 
			   i.item_category, 
			   i.item_price,
			   i.item_sale, 
			   i.item_stock, 
			   i.item_status,  
			   i.item_readcount,  
			   i.item_date,
			   m.manager_brandname 
			  
		 FROM item i  JOIN manager m  ON i.re_manager_idx= m. manager_idx 
		 WHERE m.manager_id= #{ id}
		
	
	<if test="!keyword.equals('')">
				<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
					<choose>
					<when test="searchType.equals('item_name')">
					AND i.item_name LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('item_category')">
					AND i.item_category LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('item_packing')">
					AND i.item_packing LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('item_stock')">
					AND i.item_stock LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('brand_name')">
					AND m.manager_brandname LIKE '%${keyword}%' 
					</when>
				</choose>
	</if>
	     ORDER BY i.item_idx DESC
	        LIMIT #{startRow}, #{listLimit}
	</select>
	
<!-- 상품 목록 갯수 조회 -->
	
	<select id="selectItemListCount" resultType="integer">
	
		SELECT 
		COUNT(*)
			FROM item
	

    </select>
   
   
	<!--상품 상세 조회 -->
	<select id="selectItemInfo" resultType="com.itwillbs.Code_Green.vo.ItemVO">
		SELECT * FROM item
		WHERE  
			 item_idx=#{item_idx} 
			 
	</select> 
	
	
		<!-- 상품 조회수 증가 -->
<!-- 	<update id="updateReadcount"> -->
<!-- 		UPDATE item -->
<!-- 			SET -->
<!-- 				item_readcount = item_readcount + 1 -->
<!-- 			WHERE -->
<!-- 				item_idx = #{item_idx} -->
<!-- 	</update> -->
    
	<!--상품문의글 목록 조회 -->
<!-- 	<select id="selectQnaBoardList" resultType="com.itwillbs.Code_Green.vo.QnaVO"> -->
<!-- 		SELECT * FROM qna -->
<!-- 		WHERE -->
<!-- 			qna_type='상품문의' -->
<!-- 	</select> -->

	<!--상품문의글 목록 조회(검색기능추가) -->
	<select id="selectQnaBoardList" resultType="com.itwillbs.Code_Green.vo.QnaVO">
		SELECT * FROM qna
		WHERE
			qna_type='상품문의'
			
		<if test="!keyword.equals('')">
<!-- 				2. 검색타입(search)에 따른 WHERE 변경 -->
				<choose>
					<when test="searchType.equals('qna_subject')">
					AND qna_subject LIKE '%${keyword}%' 
					</when>
					<when test="searchType.equals('qna_category')">
					AND qna_category LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('qna_id')">
					AND qna_id LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('qna_answer')">
					AND qna_answer LIKE '%${keyword}%'
					</when>
					
				</choose>
	</if>
	  	ORDER BY qna_idx DESC
			 LIMIT #{startRow}, #{listLimit}
			 
			 
	 		
			
	</select>


	<!--상품문의글 상세 조회 -->
	<select id="selectQnaInfo" resultType="com.itwillbs.Code_Green.vo.QnaVO">
		SELECT * FROM qna
		WHERE  
			 qna_idx=#{qna_idx} 
			 
	</select>




<!-- 상품문의글 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectQnaBoardListCount" resultType="integer">
		SELECT 
		     COUNT(*)
		      FROM qna
		      WHERE qna_type='상품문의'
			<!-- choose, when, otherwise 태그를 사용하여 복수개의 조건 판별(if ~ else if 문 구조) -->
			<!-- 1. 검색어(keyword)가 널스트링이 아닐 때 검색 수행 -->
<!-- 					<if test="!keyword.equals('')"> -->
<!-- 				2. 검색타입(search)에 따른 WHERE 변경 -->
<!-- 					<choose> -->
<!-- 					<when test="searchType.equals('qna_category')"> -->
<!-- 					WHERE qna_category LIKE '%${keyword}%' -->
<!-- 					</when> -->
<!-- 					<when test="searchType.equals('qna_subject')"> -->
<!-- 					AND qna_subject LIKE '%${keyword}%'  -->
<!-- 					</when> -->
<!-- 					<when test="searchType.equals('qna_date')"> -->
<!-- 					AND qna_date LIKE '%${keyword}%'  -->
<!-- 					</when> -->
<!-- 				</choose> -->
<!-- 		</if> -->
	</select>
		
		
	<!-- 게시물 조회수 증가 -->
	<update id="updateReadcount">
		UPDATE board
			SET 
				board_readcount = board_readcount + 1
			WHERE
				board_idx = #{board_idx}
	</update>
		
		
		
		
	<!-- 글 상세정보 조회 -->
	<select id="selectItemDetail" resultType="com.itwillbs.Code_Green.vo.ItemVO">
		SELECT * 
			FROM item
			WHERE 
			item_idx = #{item_idx}
	</select>	
		
	

	<!-- 팔로우 목록 조회 -->
<!-- 	<select id="selectFollowInfo" resultType="com.itwillbs.Code_Green.vo.FollowVO"> -->
<!-- 		SELECT COUNT(DISTINCT follow_idx) -->
<!-- 		FROM FOLLOW -->
<!-- 		WHERE MANAGER_BRANDNAME=#{manager_brandname} -->
<!-- 		JOIN manager ; -->
<!-- 		VALUES -->
<!-- 	</select> -->





</mapper>
