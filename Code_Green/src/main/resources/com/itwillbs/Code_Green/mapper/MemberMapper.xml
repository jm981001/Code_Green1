<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.Code_Green.mapper.MemberMapper">

	<!-- 가입 -->
	<insert id="insertMember">
		<selectKey keyProperty="member_idx" resultType="integer" order="BEFORE">
			SELECT MAX(member_idx) FROM member
		</selectKey>
		INSERT INTO member
		VALUES (
				#{member_idx} + 1, 
				#{member_id},		<!-- 	MEMBER_ID VARCHAR(16) UNIQUE NOT NULL, 		-->
				#{member_pass},		<!-- 	MEMBER_PASS VARCHAR(20) UNIQUE NOT NULL, 	-->
				#{member_name},		<!--    MEMBER_NAME VARCHAR(10) NOT NULL, 			-->
				#{member_phone},	<!-- 	MEMBER_PHONE VARCHAR(12) UNIQUE NOT NULL, 	-->
				#{member_email},    <!-- 	MEMBER_EMAIL VARCHAR(30) UNIQUE NOT NULL, 	-->
				'N',				<!-- 	MEMBER_EMAIL_AUTH VARCHAR(1) DEFAULT 'N', 	-->
				#{member_postcode},	<!-- 	MEMBER_POSTCODE VARCHAR(6) NOT NULL, 		-->
				#{member_address},	<!-- 	MEMBER_ADDRESS VARCHAR(100) NOT NULL, 		-->
				'N',				<!--	MEMBER_DEL_YN VARCHAR(1) DEFAULT 'N',		-->
				date_format(now(),'%Y%m%d%T')<!--MEMBER_DATE VARCHAR(14) NOT NULL	 		-->
				)
	</insert>

	<!-- 회원가입시 기본 적립금 지급 -->
	<update id="setCoin">
		UPDATE coin
			SET 
				coin_add = 3000
			WHERE
				rf_member_idx = #{member_idx}
	</update>
	
	
	

	<!-- 
	BCryptPasswordEncoder 객체를 활용하여 로그인을 수행할 때
	암호문으로 저장되어 있는 패스워드 조회하기 위한 SELECT 구문 작성
	=> 이 때, MemberVO 타입을 resultType 으로 선언해도 되지만
	   패스워드 컬럼 1개의 문자 데이터이므로 string(String) 타입으로 선언해도 된다!
	-->
	<!-- 로그인 -->
	<select id="selectPasswd" resultType="string">
		SELECT member_pass 
		FROM member
		WHERE member_id = #{member_id}
	</select>
	
<!-- 	<select id="loginMember" -->
<!-- 		resultType="com.itwillbs.Code_Green.vo.MemberVO"> -->
<!-- 		SELECT * FROM member -->
<!-- 		WHERE MEMBER_ID=#{member_id} AND -->
<!-- 		MEMBER_PASS=#{member_pass} -->
<!-- 	</select> -->

	<!-- 3. 회원 정보 조회 수행을 위한 select 태그 작성 -->
	<!-- => MemberMapper 객체의 selectMemberInfo() 메서드명을 id 속성값으로 지정 -->
	<!-- => 파라미터는 메서드 전달된 파라미터 변수명과 동일한 이름 사용 -->
	<!-- => 결과 타입은 1개 레코드 정보를 저장할 MemberVO 타입 지정 -->

	<select id="selectMemberInfo"
		resultType="com.itwillbs.Code_Green.vo.MemberVO">
		SELECT * FROM member
		WHERE MEMBER_ID=#{member_id}
	</select>
	
	
	
	<!--  마이페이지 // 팔로우 브랜드 리스트 -->
	<select id="selectFollowList" resultType="com.itwillbs.Code_Green.vo.FollowVO">
		 SELECT  f.follow_idx,
		 		 f.rf_member_idx,
		  		 mb.member_id,
	       		 f.rf_manager_idx,
	       		 ff.store_follower_cnt,
		   		 f.follow_date,
	       		 m.manager_brandname,
	       		 m.manager_original_file
			FROM follow f
			LEFT JOIN
					(SELECT rf_manager_idx,count(*) AS store_follower_cnt FROM follow GROUP BY rf_manager_idx) AS ff
			ON f.rf_manager_idx = ff.rf_manager_idx
			LEFT JOIN
					(SELECT member_idx, member_id from member) AS mb
			ON f.rf_member_idx = mb.member_idx
			LEFT JOIN 
					(SELECT manager_idx, manager_brandname,manager_original_file FROM manager) AS m
			ON f.rf_manager_idx = m.manager_idx
			WHERE 
					mb.member_id=#{member_id}
			ORDER BY 
					f.follow_date DESC
	
	</select>
	
	
	<!-- 마이페이지 // 내정보 카운트 테이블 -->
	<select id="selectMyCountInfo" resultType="com.itwillbs.Code_Green.vo.MemberVO">
		SELECT	m.member_idx,
			    m.member_id,
			    m.member_name,
			    m.member_email,
			    c.coin_total,
			    h.heart_count,
			    b.board_count,
			    f.follow_count,
			    q.qna_count,
			    s.order_count
			FROM member m
			LEFT JOIN 
					(SELECT rf_member_idx, coin_total FROM coin GROUP BY rf_member_idx) AS c
			ON m.member_idx = c.rf_member_idx
			LEFT JOIN 
					(SELECT rf_member_idx, count(*) AS heart_count FROM heart GROUP BY rf_member_idx) AS h
			ON m.member_idx = h.rf_member_idx
			LEFT JOIN 
					(SELECT board_id, count(*) AS board_count FROM board WHERE board_type='커뮤' GROUP BY board_id) AS b
			ON m.member_id = b.board_id
			LEFT JOIN 
					(SELECT rf_member_idx, count(*) AS follow_count FROM follow GROUP BY rf_member_idx) AS f
			ON m.member_idx = f.rf_member_idx
			LEFT JOIN 
					(SELECT qna_id, count(*) AS qna_count FROM qna WHERE qna_type='1:1문의' GROUP BY qna_id) AS q
			ON m.member_id = q.qna_id
			LEFT JOIN 
					(SELECT rf_member_idx, count(*) AS order_count FROM sell group by rf_member_idx) AS s
			ON m.member_idx = s.rf_member_idx 
			WHERE m.member_idx = #{member_idx};
	
	</select>
	
	
</mapper>
